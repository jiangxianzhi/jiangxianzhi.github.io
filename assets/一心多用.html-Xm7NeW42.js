import{_ as e,o as a,c as r,a as t}from"./app-PRfn_fru.js";const s={},n=t('<h1 id="一心多用" tabindex="-1"><a class="header-anchor" href="#一心多用"><span>一心多用</span></a></h1><p>我理解的一心多用是指，一个人手上同时并行多件事情。<br> 在单核cpu中执行多个thread的方法是分时方法，<br> like thread1用1s，thread2用1s，然后再轮到thread1，<br> 这样看起来就是thread1和thread2同时进行。<br> 我觉得人其实也是这样的执行方式，<br> 比如：小明正在完成事情A，但是紧急事件B插入进来， <br> 小明只好放下手中的A事件去完成B，这时候如果事件C，事件D插进来,<br> 小明会觉得手头上事情很多而且很乱，倘若事件A更加紧急，<br> 比如说突然收到通知，英语作业明天就要交了，<br> 那么小明继续又不得不停下事件D去完成A。 <br> 出现这种情况有时候是环境所迫，有时候是自己三心二意，心猿意马导致的。<br> （但如果一个人脚踩独轮车，手上转盘子，嘴上再弄什么杂技的情况先不讨论）</p><h2 id="上下文切换" tabindex="-1"><a class="header-anchor" href="#上下文切换"><span>上下文切换</span></a></h2><p>“上下文切换”这个概念是我从js函数作用域和一本程序员相关的书籍上面理解的，同时用在人完成任务上也十分恰当。比如人从噩梦中醒来时，往往会先环视四周，看看坏人还在不在。这时他的上下文还在噩梦中，可能时梦魇萦绕，可能是心魔缠身，但他已经醒了这时的上下文切换成了舒适的卧室，一张古色古香的木桌，墙上几幅名人的山水画。他清醒的过程就是“上下文切换”的过程。</p><h2 id="一心多用的坏处" tabindex="-1"><a class="header-anchor" href="#一心多用的坏处"><span>一心多用的坏处</span></a></h2><p><em><strong>1.消耗大脑</strong></em>，人脑没有cpu切换的那么快。很多脑筋急转弯就是利用这一点首先让人进入上下文A,但它的答案可能再上下文B，于是大部分人想不出来该如何解答，但知道答案后又有一种&quot;恍然大悟&quot;或者说勉强表示理解的感觉。比如：春夏秋冬，这四个字选出最特别的一个字出来。倘若上下文是季节，那么者四者都表示季节，就挑选不出这个字。倘若上下文是发音音调，分别是一声，四声，一声，一声，那么这个字就是“夏”。但是答案是秋，因为只有它是左右结构。 同时如果一个人手上多个事件来回切换着做，那么他的上下文也在飞快的切换。计算机可能几毫秒，而人基本做不到。<br><br><em><strong>2.遗忘。</strong></em> “我刚想干什么事情来着”，如果生活中你也有这样的，那么恭喜你中招了。这种情况多半在执行事件A上，突然被事件B打断，完成事件B之后，触发遗忘事件A的上下文。</p><h1 id="应对策略" tabindex="-1"><a class="header-anchor" href="#应对策略"><span>应对策略</span></a></h1><ol><li>使用promise的方法，即完成事情A再去完成事情B。（当然生活中往往不可能这样顺畅）</li><li>善假身外之物。当事情B插入时，先拿个小本本记一下本来正在进行的事情，或者用闹钟提醒也好，让他人提醒也行。</li></ol>',8),h=[n];function l(o,i){return a(),r("div",null,h)}const d=e(s,[["render",l],["__file","一心多用.html.vue"]]),p=JSON.parse('{"path":"/ghost/%E4%B8%80%E5%BF%83%E5%A4%9A%E7%94%A8.html","title":"一心多用","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"上下文切换","slug":"上下文切换","link":"#上下文切换","children":[]},{"level":2,"title":"一心多用的坏处","slug":"一心多用的坏处","link":"#一心多用的坏处","children":[]}],"git":{},"filePathRelative":"ghost/一心多用.md"}');export{d as comp,p as data};
