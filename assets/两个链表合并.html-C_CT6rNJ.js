import{_ as a,r as e,o as t,c as p,b as s,d as o,e as c,a as l}from"./app-CrKXQHLj.js";const i={},r=l(`<h1 id="两个链表合并" tabindex="-1"><a class="header-anchor" href="#两个链表合并"><span>两个链表合并</span></a></h1><h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><p>输入的两个链表头部各一个指针慢慢往后推，谁小就插入新的链表中，直到结束</p><h2 id="答案" tabindex="-1"><a class="header-anchor" href="#答案"><span>答案</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token comment">/**
 * struct ListNode {
 *  int val;
 *  struct ListNode *next;
 * };
 */</span>

<span class="token comment">/**
 *
 * @param pHead1 ListNode类
 * @param pHead2 ListNode类
 * @return ListNode类
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pHead1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pHead2 <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> res<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> dumy<span class="token operator">=</span>res<span class="token punctuation">;</span>
       <span class="token keyword">while</span><span class="token punctuation">(</span>pHead1<span class="token operator">&amp;&amp;</span>pHead2<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> node<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>pHead1<span class="token operator">-&gt;</span>val<span class="token operator">&lt;</span>pHead2<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>val <span class="token operator">=</span> pHead1<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
                pHead1 <span class="token operator">=</span> pHead1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>val <span class="token operator">=</span> pHead2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
                pHead2 <span class="token operator">=</span> pHead2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            res<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            res <span class="token operator">=</span> res<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       res<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pHead1 <span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">?</span> pHead2<span class="token operator">:</span>pHead1<span class="token punctuation">;</span>
       <span class="token keyword">return</span> dumy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>

<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),d={id:"题目网站",tabindex:"-1"},u={class:"header-anchor",href:"#题目网站"},k={href:"https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=308&tqId=23267&ru=%2Fpractice%2Fd8b6b4358f774294a89de2a6ac4d9337&qru=%2Fta%2Falgorithm-start%2Fquestion-ranking&sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D308",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const n=e("ExternalLinkIcon");return t(),p("div",null,[r,s("h2",d,[s("a",u,[s("span",null,[s("a",k,[o("题目网站"),c(n)])])])])])}const g=a(i,[["render",v],["__file","两个链表合并.html.vue"]]),_=JSON.parse('{"path":"/algorithm/linklist/%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E5%90%88%E5%B9%B6.html","title":"两个链表合并","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"答案","slug":"答案","link":"#答案","children":[]},{"level":2,"title":"题目网站","slug":"题目网站","link":"#题目网站","children":[]}],"git":{},"filePathRelative":"algorithm/linklist/两个链表合并.md"}');export{g as comp,_ as data};
